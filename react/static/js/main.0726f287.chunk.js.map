{"version":3,"sources":["consts.js","components/projects.js","components/ProjectsContext.js","components/HorizontalCard.js","components/LoginContext.js","components/ProjectCard.js","components/MainPage.js","components/Portfolio.js","components/AboutMe.js","components/ContactMe.js","components/Footer.js","components/Header.js","components/Login.js","components/AdminCreateProject.js","components/UploadFile.js","components/AdminEditProject.js","components/ChooseText.js","components/AdminEditTexts.js","components/AdminMessages.js","components/AdminPage.js","components/ProtectedRoute.js","components/ScrollToTop.js","components/MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["constants","uriBase","authRoute","projectsRoute","usersRoute","textsRoute","messagesRoute","DUMMY_DATA","getProjects","fetch","consts","method","then","httpResponse","ok","Error","json","result","catch","error","console","log","ProjectsContext","React","createContext","ProjectsProvider","props","useState","projects","setProjects","images","setImages","texts","setTexts","useEffect","length","imgNames","httpResonse","Provider","value","children","Consumer","HorizontalCard","useContext","Grid","container","spacing","justify","item","xs","Card","raised","CardContent","CardMedia","component","alt","height","image","title","Typography","gutterBottom","variant","color","location","rtnValue","element","text","getText","CardActions","Button","size","RLink","to","LoginContext","LoginProvider","loggedIn","setLoggedIn","token","setToken","localToken","window","localStorage","getItem","payload","jwt","decode","Date","now","valueOf","exp","alert","removeItem","writeToken","setItem","LoginConsumer","useStyles","makeStyles","root","maxWidth","minWidth","margin","display","flexDirection","justifyContent","media","ProjectCard","classes","card","_id","id","Fragment","className","imgSrc","liveLink","href","target","gitHubLinks","map","index","key","split","onClick","headers","deletedCount","newList","project","indexOf","splice","MainPage","alignItems","rtnArr","push","getThreeProjects","style","textAlign","Portfolio","AboutMe","textArray","setTextArray","textArray2","setTextArray2","setState","newTextArray","Paper","elevation","ContactMe","name","setName","email","setEmail","message","setMessage","clearState","padding","TextField","required","label","onChange","event","multiline","fullWidth","match","currentDate","sendMessage","date","app","body","JSON","stringify","httpResult","float","width","Footer","BottomNavigation","showLabels","BottomNavigationAction","icon","rel","theme","flexGrow","menuButton","marginRight","list","fullList","Header","openDrawer","setOpenDrawer","onClickHandler","AppBar","position","Toolbar","IconButton","edge","aria-label","Drawer","open","onClose","role","List","ListItem","button","toLowerCase","ListItemIcon","listItem","getIcon","ListItemText","primary","paper","marginTop","avatar","backgroundColor","palette","secondary","main","form","submit","SignIn","password","setPassword","Container","CssBaseline","Avatar","autoComplete","autoFocus","type","history","guestToken","sign","user","expiresIn","formControl","selectEmpty","AdminCreateProject","setTitle","setText","setLiveLink","setGitHubLinks","setImgSrc","helperText","select","child","img","MenuItem","preventDefault","newProject","undefined","UploadFile","file","setFile","onSubmit","data","FormData","append","response","Input","files","inputProps","AdminEditProject","setId","currentProject","setCurrentProject","clearInputs","updatedProject","Array","isArray","replace","changes","property","nModified","ChooseText","fieldText","setFieldText","textInfo","getTextByLocation","setEditTextId","setEditText","AdminEditTexts","editTextId","AdminMessages","showMessages","setShowMessages","messages","setMessages","onClickDelete","a","toLocaleDateString","AdminPage","direction","ProtectedRoute","Component","rest","render","withRouter","unlisten","listen","scrollTo","MainRouter","path","Login","App","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0726f287.chunk.js","sourcesContent":["\nconst constants = {\n\n    uriBase: process.env.NODE_ENV !== 'production' ? (\n            \"http://localhost:3001\"\n            ) : (\n            \"\" // this is blank because heroku adds the base for us\n            ),\n\n    authRoute: \"/api/v1/auth\",\n    projectsRoute: \"/api/v1/projects\",\n    usersRoute: \"/api/v1/users\",\n    textsRoute: \"/api/v1/texts\",\n    messagesRoute: \"/api/v1/messages\"\n}\n\n\n\nexport default constants\n","import consts from '../consts'\n\nlet DUMMY_DATA = [\n    {\n        \"_id\": 0,\n        \"title\": \"Task Manager\",\n        \"text\": \"I've created a simple task app and added Google signin using OAuth2. The front end is created in React.js and the backend is run on Node.js with a MongoDB database. The sight utilized authentication and authorization.\",\n        \"liveLink\": \"https://sn-todo.herokuapp.com\",\n        \"gitHubLinks\": [\"https://github.com/spencerNelson-dev/to-do-ui\",\n                        \"https://github.com/spencerNelson-dev/to-do-api\"],\n        \"imgSrc\": \"task-tracker.png\"\n    }\n]\n\nconst getProjects = () => {\n\n     return fetch(`${consts.uriBase}${consts.projectsRoute}`,{\n        method:\"GET\"\n    })\n    .then(httpResponse => {\n        if(!httpResponse.ok){\n            throw new Error(\"Could not get all projects\")\n        }\n\n        return httpResponse.json()\n    })\n    .then(result => {\n\n        // if there are no projects found\n        // use the hard coded data\n        if (result === []){\n            return DUMMY_DATA\n        }\n\n        return result\n    })\n    .catch(error => {\n        console.log(error)\n        // if there is an error\n        // use the dummy data\n        return DUMMY_DATA\n    })\n}\n\n\n\nexport default getProjects","import React, { useState, useEffect } from 'react'\nimport consts from '../consts'\nimport getProjects from './projects'\n\n\nconst ProjectsContext = React.createContext()\n\nconst ProjectsProvider = (props) => {\n\n    const [projects, setProjects] = useState([])\n    const [images, setImages] = useState([])\n    const [texts, setTexts] = useState([])\n\n    const getImgNames = () => {\n\n        return fetch(`${consts.uriBase}${consts.projectsRoute}/img`, {\n            method: \"Get\"\n        })\n            .then(httpResponse => {\n                if (!httpResponse.ok) {\n                    throw new Error(\"Could not get image file names\")\n                }\n\n                return httpResponse.json()\n            })\n            .then(imgNames => {\n\n                setImages(imgNames)\n\n            })\n            .catch(error => {\n                console.log(error)\n                setImages([])\n            })\n    }\n\n    const getTexts = () => {\n\n        return fetch(`${consts.uriBase}${consts.textsRoute}`, {\n            method: \"GET\"\n        })\n            .then(httpResonse => {\n                if (!httpResonse.ok) {\n                    throw new Error(\"Failed to fetch texts.\")\n                }\n\n                return httpResonse.json()\n            })\n            .then(result => {\n                setTexts(result)\n            })\n            .catch(error => {\n                console.log(error)\n                setImages([])\n            })\n    }\n\n\n    useEffect(() => {\n\n        //only go to the server the\n        //first time the app loads\n        // for projects, images and texts\n        if (projects.length === 0) {\n\n            getProjects()\n            .then(result => {\n                setProjects(result)\n            })\n        }\n        if (images.length === 0) {\n            getImgNames()\n        }\n        if (texts.length === 0) {\n            getTexts()\n        }\n\n    }, [images.length, projects.length, texts.length])\n\n    return (\n        <ProjectsContext.Provider value={{ projects, setProjects, images, setImages, texts, setTexts }}>\n            {props.children}\n        </ProjectsContext.Provider>\n    )\n}\n\nconst ProjectsConsumer = ProjectsContext.Consumer\nexport { ProjectsProvider, ProjectsConsumer, ProjectsContext }\n\n","import React, { useContext } from 'react';\nimport { ProjectsContext } from './ProjectsContext'\nimport { Link as RLink } from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport consts from '../consts'\n\nconst HorizontalCard = (props) => {\n\n    const { texts } = useContext(ProjectsContext)\n\n    const getText = (location) => {\n\n        let rtnValue = ''\n\n        for (let element of texts) {\n            if (element.location === location) {\n                rtnValue = element.text\n            }\n        }\n\n        return rtnValue\n    }\n\n\n\n    return (\n        <div>\n            <div>\n                <Grid container spacing={5} justify='center'>\n\n                    <Grid item xs={10}>\n                        <Card raised={true}>\n                            <CardContent>\n\n                                <CardMedia\n                                    component=\"img\"\n                                    alt=\"Hot air balloons\"\n                                    height=\"140\"\n                                    image={`${consts.uriBase}/public/images/about.jpg`}\n                                    title=\"Who is Spencer Nelson\"\n                                />\n\n                                {/* Card Title */}\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                    Spencer Nelson\n                                </Typography>\n\n                                {/* Card description text */}\n                                <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\n                                    {getText('MainPage-Introduction')}\n                                </Typography>\n\n                            </CardContent>\n                            <CardActions>\n                                <Button size=\"small\" color=\"primary\" component={RLink}\n                                    to='/about'>\n                                    More About Me\n                                     </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                </Grid>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default HorizontalCard;","import React, { useState, useEffect } from 'react'\nimport jwt from 'jsonwebtoken'\n\n\nconst LoginContext = React.createContext()\n\nconst LoginProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [token, setToken] = useState('')\n\n    // want to write to local storage.\n    // so when the user refreshes we aren't logged out\n    const writeToken = (token) => {\n\n        window.localStorage.setItem(\"token\", token)\n\n        setToken(token)\n        setLoggedIn(true)\n    }\n\n    useEffect(() => {\n\n        let localToken = window.localStorage.getItem('token')\n\n        // if a token is in local storage\n        if (localToken) {\n\n            // decode the token\n            let payload = jwt.decode(localToken)\n\n            // Check if the token is expired\n            if (Date.now().valueOf() / 1000 >= payload.exp) {\n\n                // alert\n                alert(\"You have been logged out due to inactivity.\")\n                setLoggedIn(false)\n                window.localStorage.removeItem('token')\n            } else {\n                // the token is not expired\n                setToken(localToken)\n                setLoggedIn(true)\n            }\n\n        }// end of if\n    }, [])\n\n    return (\n        <LoginContext.Provider value={{ loggedIn, setLoggedIn, token, writeToken }}>\n            {props.children}\n        </LoginContext.Provider>\n    )\n}\n\nconst LoginConsumer = LoginContext.Consumer\nexport { LoginProvider, LoginConsumer, LoginContext }\n\n","import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n//import Paper from '@material-ui/core/Paper'\nimport consts from '../consts'\nimport {LoginContext} from './LoginContext'\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        minWidth: 345,\n        margin: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    media: {\n        height: 140,\n    },\n});\n\nfunction ProjectCard(props) {\n    const classes = useStyles();\n\n    const {loggedIn, token} = useContext(LoginContext)\n    const [id] = useState(props.card._id)\n\n    const onClickDelete = () => {\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}/${props.card._id}`,{\n            method: \"DELETE\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n            }\n        })\n        .then(httpResponse => {\n            if(!httpResponse.ok){\n\n                throw new Error(\"Could not delete object\")\n            }\n\n            return httpResponse.json()\n        })\n        .then(result => {\n\n            // if the result comes back with a deleted count of 1\n            // update the state of the projects array\n            if(result.deletedCount === 1){\n\n                // update our projects array\n                let newList = [...props.projects]\n\n                let index\n\n                // find the indexOf the deleted project\n                for (let project of newList){\n\n                    if(project._id === id){\n                        index = newList.indexOf(project)\n                    }\n                }\n\n                //remove it from the projects array\n                newList.splice(index, 1)\n\n                //set the state\n                props.setProjects(newList)\n            }\n            else {\n                alert(\"Not Authorized\")\n            }\n        })\n        .catch(error => {\n            console.log(error)\n        })\n\n    }\n\n    return (\n        <React.Fragment>\n            {/* classes.root */}\n            <Card className={classes.root} raised={true}> \n\n                {/* Card picture */}\n                <CardMedia\n                    className={classes.media}\n                    image={`${consts.uriBase}/public/images/${props.card.imgSrc}`}\n                    title={props.card.imgSrc}\n                    id={props.card.imgSrc}\n                />\n                <CardContent>\n\n                    {/* Card Title */}\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {props.card.title}\n                    </Typography>\n\n                    {/* Card description text */}\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {props.card.text}\n                    </Typography>\n\n                </CardContent>\n\n\n                <CardActions>\n\n                    {/* Live Site button */}\n                    {\n                        props.card.liveLink !== \"\" ? (\n\n                            <Button href={props.card.liveLink} target=\"_blank\" size=\"small\" color=\"primary\">\n                                Live Site\n                            </Button>\n\n                        ) : (\n                                null\n                            )\n                    }\n\n                    {/* GitHub button */}\n                    {\n                        props.card.gitHubLinks !== [] ? (\n                            props.card.gitHubLinks.map((value, index)=> {\n                                return(\n                                    <Button target=\"_blank\" key={value} href={value} color=\"primary\">{`GitHub ${index + 1}`}</Button>\n                                )\n                            })\n                        ):(\n                            null\n                        )\n                    }\n                    {/* Delete Button (only if logged in) */}\n                    {\n                        loggedIn ? (\n                            <Button\n                            id={props.card.title.split(\" \")[0] + 'Delete'}\n                             onClick={onClickDelete} color='secondary'>Delete</Button>\n                        ):(\n                            null\n                        )\n                    }\n\n                </CardActions>\n            </Card>\n\n\n        </React.Fragment>\n    );\n}\n\nexport default ProjectCard;","import React, { useContext } from 'react'\nimport HorizontalCard from './HorizontalCard'\nimport ProjectCard from './ProjectCard'\nimport { Link as RLink } from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport { ProjectsContext } from './ProjectsContext'\n\n//function to get only three projects\nfunction getThreeProjects(projects, setProjects) {\n\n    let rtnArr = []\n\n    for (let index = 0; index < projects.length && index < 3; index++) {\n        rtnArr.push(projects[index])\n    }\n\n    return rtnArr\n}\n\nexport default function MainPage(props) {\n\n    const { projects, setProjects } = useContext(ProjectsContext)\n\n    return (\n        <div>\n            {/* <!-- Section with horizontal card --> */}\n            <HorizontalCard></HorizontalCard>\n\n            {/* <!-- Section with project pictures and info --> */}\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={3} alignItems='stretch' >\n                        {\n                            getThreeProjects(projects).map(project => {\n                                return (\n                                    <Grid key={project._id} item\n                                        component={() => <ProjectCard key={project._id}\n                                            card={project}\n                                            projects={projects}\n                                            setProjects={setProjects} />} >\n                                    </Grid>\n                                )\n                            })\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            <br /><br />\n            {/* <!-- Section with our Portfolio Button --> */}\n            <div style={{ textAlign: 'center' }}>\n                <Button variant=\"contained\"\n                    color=\"secondary\"\n                    component={RLink}\n                    to='/portfolio'>\n                    View All Projects\n                </Button>\n            </div>\n\n        </div>\n    )\n}","import React, {useContext } from 'react';\nimport ProjectCard from './ProjectCard'\nimport Grid from '@material-ui/core/Grid'\nimport {ProjectsContext} from './ProjectsContext'\n\nfunction Portfolio(props) {\n\n    const {projects, setProjects} = useContext(ProjectsContext)\n\n    return (\n        <div>\n            <br /><br />\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={3}>\n                        {\n                            projects.map(project => {\n                                return (\n                                    <Grid key={project._id} item\n                                        component={() => <ProjectCard key={project._id}\n                                            card={project}\n                                            setProjects={setProjects}\n                                            projects={projects} />} >\n                                    </Grid>\n                                )\n                            })\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n            <br /><br />\n        </div >\n    );\n}\n\nexport default Portfolio;","import React, { useContext, useState } from 'react';\nimport { ProjectsContext } from './ProjectsContext'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport consts from '../consts'\n\nfunction AboutMe(props) {\n\n  const { texts } = useContext(ProjectsContext)\n\n  const [textArray, setTextArray] = useState([])\n  const [textArray2, setTextArray2] = useState([])\n\n  const getText = (location, setState) => {\n\n    if (texts.length > 0 && textArray.length === 0) {\n\n      let rtnValue = ''\n\n      for (let element of texts) {\n        if (element.location === location) {\n          rtnValue = element.text\n        }\n      }\n\n      let newTextArray = rtnValue.split(\"\\n\\n\")\n\n      if (newTextArray.length > 1) {\n        setState(newTextArray)\n      }\n\n    }\n  }\n\n  getText('About-Introduction', setTextArray)\n  getText('About-Mission', setTextArray2)\n\n  return (\n    <div>\n\n      <Grid container>\n        <Grid item xs={12} style={{ margin: '1% 15%' }}>\n\n          <Paper elevation={6}>\n            <Card >\n              <CardMedia\n                component=\"img\"\n                alt=\"Hot air balloons\"\n                height=\"140\"\n                image={`${consts.uriBase}/public/images/about.jpg`}\n                title=\"Who is Spencer Nelson\"\n              />\n              <CardContent>\n\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Introduction\n                </Typography>\n\n                {\n                  textArray.map(value => {\n\n                    return (\n                      <Typography style={{ margin: 10 }} key={value} variant=\"body2\" color=\"textPrimary\" component=\"p\">\n                        {value}\n                      </Typography>\n                    )\n                  })\n                }\n\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Mission\n                </Typography>\n\n                {\n                  textArray2.map(value => {\n\n                    return (\n                      <Typography style={{ margin: 10 }} key={value} variant=\"body2\" color=\"textPrimary\" component=\"p\">\n                        {value}\n                      </Typography>\n                    )\n                  })\n                }\n\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Resume\n                </Typography>\n                <a href={`${consts.uriBase}/resume`}>Resume</a>\n\n              </CardContent>\n            </Card>\n          </Paper>\n\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n\nexport default AboutMe;","import React, { useContext, useState } from 'react';\nimport { ProjectsContext } from './ProjectsContext'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\n\nfunction ContactMe(props) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [message, setMessage] = useState('')\n\n    const { texts } = useContext(ProjectsContext)\n\n    const getText = (location) => {\n\n        let rtnValue = ''\n\n        for (let element of texts) {\n            if (element.location === location) {\n                rtnValue = element.text\n            }\n        }\n\n        return rtnValue\n    }\n\n    const clearState = () => {\n        setName('')\n        setEmail('')\n        setMessage('')\n    }\n\n    const onClickSendMessage = () => {\n\n        //verify that an email name and message have been entered\n        if (name === '' || email === '' || message === '') {\n            alert(\"Please fill out name, email and message\")\n        }\n\n        //verify that the email is valid\n        const emailRegEx = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g\n        if (email.match(emailRegEx) === null) {\n            alert(\"Please enter a valid email\")\n        }\n\n        // get the current date\n        let currentDate = new Date()\n\n        // create our object to send to our backend\n        let sendMessage = {\n            name,\n            email,\n            message,\n            date: currentDate,\n            app: \"Portfolio\"\n        }\n\n        fetch(`${consts.uriBase}${consts.messagesRoute}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(sendMessage)\n        })\n        .then(httpResult => {\n            if(!httpResult.ok){\n                alert(\"Message failed to send\")\n            }\n\n            return httpResult.json()\n        })\n        .then(message => {\n\n            alert(\"Message sent!\")\n\n            // clear state\n            clearState()\n        })\n\n\n        console.log(sendMessage)\n    }\n\n    return (\n        <div>\n            <Paper elevation={3} style={{ padding: 16, margin: 16 }}>\n                {getText('ContactMe')}\n            </Paper>\n\n            <Paper elevation={3} style={{ padding: 16, margin: 16 }}>\n                <div>\n                    <TextField required\n                        label=\"Name\"\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        label=\"Email\"\n                        value={email}\n                        onChange={(event) => setEmail(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        multiline\n                        label=\"Message\"\n                        fullWidth\n                        value={message}\n                        onChange={(event) => setMessage(event.target.value)}\n                    />\n                </div>\n                <br />\n                <Button variant='contained'\n                    color='primary'\n                    onClick={onClickSendMessage}\n                >\n                    Send Message\n                </Button>\n\n                <Button variant='contained'\n                    color='secondary'\n                    style={{ float: 'right' }}\n                    onClick={clearState}\n                >\n                    Clear\n                </Button>\n\n            </Paper>\n            <br /><br />\n        </div>\n    );\n}\n\nexport default ContactMe;","import React from 'react';\nimport { Link as RLink } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport CopyrightIcon from '@material-ui/icons/Copyright';\nimport PaletteIcon from '@material-ui/icons/Palette';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n    },\n});\n\nfunction Footer(props) {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <BottomNavigation\n                showLabels\n                className={classes.root}\n            >\n                <BottomNavigationAction component={RLink} to='/login' label=\"Spencer Nelson\" icon={<CopyrightIcon />} />\n                \n                <BottomNavigationAction href=\"https://templateflip.com/\" target=\"_blank\" rel=\"noopener noreferrer\"  label=\"templateflip.com\" icon={<PaletteIcon />} >\n                </BottomNavigationAction>\n            </BottomNavigation>\n\n        </div>\n    );\n}\n\nexport default Footer;","import React, { useState, useContext } from 'react';\nimport { Link as RLink } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport PersonIcon from '@material-ui/icons/Person';\nimport MailIcon from '@material-ui/icons/Mail';\nimport TableChartIcon from '@material-ui/icons/TableChart';\n\nimport {LoginContext} from './LoginContext'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    list: {\n        width: 250,\n      },\n      fullList: {\n        width: 'auto',\n      },\n}));\n\nconst getIcon = (listItem) => {\n\n    let rtnValue\n//'Home', 'Portfolio', 'About', 'Contact'\n    switch (listItem) {\n        case 'Home':\n            rtnValue = <HomeIcon/>\n            break;\n        case 'Portfolio':\n            rtnValue = <TableChartIcon/>\n            break;\n        case 'About':\n            rtnValue = <PersonIcon/>\n            break;\n        case 'Contact':\n            rtnValue = <MailIcon/>\n            break;\n        default:\n            break;\n    }\n\n\n    return rtnValue\n}\n\nfunction Header(props) {\n    const classes = useStyles()\n\n    const [openDrawer, setOpenDrawer] = useState(false)\n\n    const {loggedIn, setLoggedIn} = useContext(LoginContext)\n\n    const onClickHandler = () => {\n\n        setOpenDrawer(!openDrawer)\n    }\n\n    const onClickLogOut = () => {\n        //remove token from local storage\n        window.localStorage.removeItem('token')\n\n        // set logged in to false\n        setLoggedIn(false)\n    }\n\n    return (\n\n        <div>\n            <div className={classes.root}>\n                <AppBar position=\"fixed\">\n                    <Toolbar >\n                        <IconButton edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={onClickHandler}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Spencer Nelson {loggedIn ? <RLink id=\"admin\" to=\"/admin\">Admin</RLink> : null}\n                            {loggedIn ? <Button id=\"logout\" onClick={onClickLogOut}>Log Out</Button> : null}\n                        </Typography>\n                        <Button color=\"inherit\" component={RLink} to='/'>Home</Button>\n                        <Button color=\"inherit\" component={RLink} to='/portfolio'>Portfolio</Button>\n                        <Button color=\"inherit\" component={RLink} to='/about'>About</Button>\n                        <Button color=\"inherit\" component={RLink} to='/contact'>Contact</Button>\n                    </Toolbar>\n                </AppBar>\n                <Toolbar />\n            </div>\n\n            <div>\n                {/* Drawer */}\n                <Drawer open={openDrawer} onClose={onClickHandler}>\n                    <div\n                    className={classes.list}\n                    role=\"presentation\">\n                    <List>\n                        {['Home', 'Portfolio', 'About', 'Contact'].map((text, index) => (\n                            <ListItem button onClick={onClickHandler} component={RLink} to={`/${text.toLowerCase()}`} key={text}>\n                                <ListItemIcon>{getIcon(text)}</ListItemIcon>\n                                <ListItemText primary={text} />\n                            </ListItem>\n                        ))}\n                    </List>\n                    </div>\n                </Drawer>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default Header;","import React, { useState, useContext } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport consts from '../consts'\nimport { LoginContext } from './LoginContext'\nimport jwt from 'jsonwebtoken'\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn(props) {\n  const classes = useStyles();\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const { writeToken } = useContext(LoginContext)\n\n  const onClick = () => {\n\n    // send the email and password\n    // to the login api and expect\n    // a token in return if successful\n    // or an empty string if not\n    fetch(`${consts.uriBase}${consts.authRoute}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ email, password })\n    })\n      .then(httpResponse => {\n        if (!httpResponse.ok) {\n          throw new Error(\"Login Failed\")\n        }\n\n        return httpResponse.json()\n      })\n      .then(token => {\n\n        //if we get a token back\n        if (token !== \"\") {\n\n          // store the token in local storage\n          writeToken(token)\n        } else {\n\n          //let the user know that the\n          //password/email combo was not valid\n          alert(\"Incorrect email and password!\")\n        }\n\n        //clear state\n        setEmail('')\n        setPassword('')\n\n        //move the user to the admin page\n        props.history.push('/admin')\n\n      })\n  }\n\n  const onGuestClick = () => {\n\n    // Give the user a dummy token\n    // that will allow the user to see\n\n    let guestToken = jwt.sign({user: 'guest'}, 'key', {expiresIn: '1h'})\n\n    writeToken(guestToken)\n\n    props.history.push('/admin')\n  }\n\n  return (\n    <div>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={`${classes.paper}`}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n        </Typography>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          <Button\n            fullWidth\n            id=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={onClick}\n          >\n            Sign In\n          </Button>\n          <Button\n            fullWidth\n            id=\"submit\"\n            variant=\"contained\"\n            color=\"secondary\"\n            className={classes.submit}\n            onClick={onGuestClick}\n          >\n            Explore the site as a guest\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}","import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\nimport { ProjectsContext } from './ProjectsContext';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { LoginContext } from './LoginContext';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nfunction AdminCreateProject(props) {\n    const classes = useStyles()\n\n    const [title, setTitle] = useState('')\n    const [text, setText] = useState('')\n    const [liveLink, setLiveLink] = useState('')\n    const [gitHubLinks, setGitHubLinks] = useState('')\n    const [imgSrc, setImgSrc] = useState('')\n\n    const { images, projects, setProjects } = useContext(ProjectsContext)\n    const { token } = useContext(LoginContext)\n\n    const clearInputs = () => {\n        setTitle('')\n        setText('')\n        setLiveLink('')\n        setGitHubLinks('')\n        setImgSrc('')\n    }\n\n    const onCreate = (event) => {\n\n        event.preventDefault()\n\n        let newProject = {\n            title,\n            text,\n            liveLink,\n            gitHubLinks,\n            imgSrc\n        }\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(newProject)\n        })\n            .then(httpResonse => {\n                if (!httpResonse.ok) {\n                    throw new Error(\"Could not get projects\")\n                }\n\n                return httpResonse.json()\n            })\n            .then(result => {\n\n                console.log(result)\n\n                if (result.message === undefined) {\n                    // update projects array\n                    let newList = [...projects]\n\n                    newList.push(result)\n\n                    setProjects(newList)\n\n                    //Clear the inputs\n                    clearInputs()\n                } else {\n                    alert(result.message)\n                }\n\n            })\n            .catch(error => {\n                alert(error)\n            })\n    }\n\n    return (\n        <div >\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <h3>Create Project</h3>\n                <div className={classes.root}>\n                    <TextField required\n                        label=\"Title\"\n                        id='createTitle'\n                        value={title}\n                        onChange={(event) => setTitle(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        multiline\n                        label=\"Text\"\n                        id='createText'\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"Live Link\"\n                        id='createLiveLink'\n                        value={liveLink}\n                        onChange={(event) => setLiveLink(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"GitHub Links\"\n                        id='createGitHubLinks'\n                        multiline value={gitHubLinks}\n                        onChange={(event) => setGitHubLinks(event.target.value)}\n                        helperText=\"multiple links seperated with commas\"\n                    />\n                    <br /><br />\n                    <TextField select\n                        id='createImgSelect'\n                        value={imgSrc}\n                        onChange={(event, child) => { setImgSrc(child.key) }}\n                        helperText=\"Please select an image\"\n                    >\n                        {\n                            images.map((img) => (\n                                <MenuItem key={img} value={img}>\n                                    {img}\n                                </MenuItem>\n                            ))\n                        }\n\n                    </TextField>\n\n                </div>\n                <br />\n                <Button variant='contained'\n                    id='createButton'\n                    color='primary'\n                    onClick={onCreate}>Create!</Button>\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminCreateProject;","import React, { useState, useContext } from 'react';\nimport Input from '@material-ui/core/Input'\nimport Button from '@material-ui/core/Button'\nimport { Paper } from '@material-ui/core';\nimport consts from '../consts'\nimport { LoginContext } from './LoginContext';\nimport { ProjectsContext } from './ProjectsContext'\n\nfunction UploadFile(props) {\n\n    const [file, setFile] = useState('')\n\n    const {token} = useContext(LoginContext)\n    const {images, setImages} = useContext(ProjectsContext)\n\n\n    const onUploadHandler = (event) => {\n\n        event.preventDefault()\n\n        const data = new FormData()\n\n        data.append('file', file)\n        data.append('filename', file.name)\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}/img/upload`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: data\n        })\n            .then(httpResponse => {\n                if (!httpResponse.ok) {\n                    throw new Error(\"Failed to upload file\")\n                }\n\n                return httpResponse.json()\n            })\n            .then(response => {\n                alert(response)\n\n                if(response === 'File Uploaded!'){\n\n                    let newList = [...images]\n\n                    newList.push(file.name)\n\n                    setImages(newList)\n                }\n                setFile('')\n            })\n            .catch(error => {\n                alert(error)\n            })\n    }\n\n    return (\n        <div>\n            <Paper elevation={3}>\n                <div style={{margin: 30}}>\n                    <h3>Upload Image</h3>\n\n                    <form onSubmit={onUploadHandler}>\n                        <Input type='file'\n                            onChange={(event) => setFile(event.target.files[0])}\n                            inputProps={{ 'aria-label': 'description' }}\n                        />\n                        <Button type='submit'>Upload</Button>\n                    </form>\n                </div>\n            </Paper>\n        </div>\n    );\n}\n\nexport default UploadFile;","import React, { useState, useContext } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\nimport { ProjectsContext } from './ProjectsContext';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { LoginContext } from './LoginContext';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    button: {\n        float: \"right\"\n    }\n}));\n\nfunction AdminEditProject(props) {\n    const classes = useStyles()\n\n    const [id, setId] = useState('')\n    const [title, setTitle] = useState('')\n    const [text, setText] = useState('')\n    const [liveLink, setLiveLink] = useState('')\n    const [gitHubLinks, setGitHubLinks] = useState('')\n    const [imgSrc, setImgSrc] = useState('')\n\n    const [currentProject, setCurrentProject] = useState({})\n\n    const { images, projects, setProjects } = useContext(ProjectsContext)\n    const {token} = useContext(LoginContext)\n\n    const clearInputs = () => {\n        setId('')\n        setTitle('')\n        setText('')\n        setLiveLink('')\n        setGitHubLinks('')\n        setImgSrc('')\n        setCurrentProject({})\n    }\n\n    const onProjectSelect = (event, child) => {\n\n        // get the project from the\n        // array of projects\n        // the component does not update state until\n        // the function is done, so we cannot use\n        // element._id === id. id would be ''\n        // even after we selected an item\n        for (let element of projects) {\n\n            if (element._id === child.key) {\n\n                // if found, set state\n                // for our inputs\n                setId(child.key)\n                setTitle(element.title)\n                setText(element.text)\n                setLiveLink(element.liveLink)\n                setGitHubLinks(element.gitHubLinks)\n                setImgSrc(element.imgSrc)\n\n                // set the currentProject state\n                // this will be used when we click\n                // the edit button\n                setCurrentProject(element)\n            }\n        }\n    }\n\n    const onEdit = () => {\n\n        //the id must be present to edit\n        if (id === '') {\n            alert(\"No project selected to edit.\")\n            clearInputs()\n        } else {\n\n            // build our updated projects\n            // from our input fields\n            let updatedProject = {\n                _id: id,\n                title,\n                text,\n                liveLink,\n                // if gitHubLinks is an array, \n                // pass in the value, else,\n                // remove spaces and newlines and\n                // split\n                gitHubLinks: Array.isArray(gitHubLinks) ? gitHubLinks : gitHubLinks.replace(/[\\s\\n]/g,'').split(','),\n                imgSrc\n            }\n\n            // build an object that contains\n            // only the properties that have\n            // changed\n            let changes = {}\n\n            for (let property in currentProject){\n\n                // we want to skip the __v property\n                if(property === '__v') continue;\n\n                // if the properties are different\n                if(updatedProject[property] !== currentProject[property]){\n\n                    // put the change into our changes obj\n                    changes[property] = updatedProject[property]\n                }\n            }\n\n            // send the changes to our PATCH api\n            fetch(`${consts.uriBase}${consts.projectsRoute}/${id}`, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                body: JSON.stringify(changes)\n            })\n            .then(httpResult => {\n                if(!httpResult.ok){\n                    throw new Error(\"Failed to patch\")\n                }\n\n                return httpResult.json()\n            })\n            .then(result => {\n\n                console.log(result)\n\n                // if an error was returned\n                if(result.message !== undefined){\n                    alert(result.message)\n                }\n                // if a row was modified\n                // update our project in the\n                // project array\n                else if(result.nModified === 1){\n\n                    let newList = [...projects]\n\n                    // look for the changed project\n                    for(let element of newList){\n                        if(element._id === id){\n\n                            // change the properties that are\n                            // in the changes object\n                            for(let property in changes){\n                                element[property] = changes[property]\n                            }\n                        }\n                    }\n    \n                    setProjects(newList)\n    \n                    //Clear the inputs\n                    clearInputs()\n\n                } else {\n                    alert(\"Nothing changed\")\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n            \n\n        }// end of if\n    }\n\n    return (\n        <div >\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <h3>Edit Project</h3>\n                <div className={classes.root}>\n                    <TextField select\n                        id='editProjectSelect'\n                        value={id}\n                        onChange={onProjectSelect}\n                        helperText=\"Please select a project\">\n                        {\n                            projects.map((project) => (\n                                <MenuItem id={project.title.split(\" \")[0]} key={project._id} value={project._id}>\n                                    {project.title}\n                                </MenuItem>\n                            ))\n                        }\n                    </TextField>\n                    <br />\n                    <TextField required\n                        label=\"Title\"\n                        id=\"editTitle\"\n                        value={title}\n                        onChange={(event) => setTitle(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        multiline\n                        label=\"Text\"\n                        id=\"editText\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"Live Link\"\n                        id=\"editLiveLink\"\n                        value={liveLink}\n                        onChange={(event) => setLiveLink(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"GitHub Links\"\n                        id=\"editGitHubLinks\"\n                        multiline value={gitHubLinks}\n                        onChange={(event) => setGitHubLinks(event.target.value)}\n                        helperText=\"multiple links seperated with commas\"\n                    />\n                    <br /><br />\n                    <TextField select\n                        id='editImageSelect'\n                        value={imgSrc}\n                        onChange={(event, child) => { setImgSrc(child.key) }}\n                        helperText=\"Please select an image\"\n                    >\n                        {\n                            images.map((img) => (\n                                <MenuItem id={img} key={img} value={img}>\n                                    {img}\n                                </MenuItem>\n                            ))\n                        }\n\n                    </TextField>\n\n                </div>\n                <br />\n                <Button variant='contained'\n                    id='editButton'\n                    color='primary'\n                    onClick={onEdit}\n                >\n                    Edit!\n                    </Button>\n\n                <Button className={classes.button} variant='contained'\n                    color='secondary'\n                    onClick={clearInputs}\n                >\n                    Clear\n                    </Button>\n\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminEditProject;","import React, { useContext, useState } from 'react';\nimport {ProjectsContext} from './ProjectsContext'\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem'\n\nfunction ChooseText(props) {\n\n    const {texts} = useContext(ProjectsContext)\n\n    const [fieldText, setFieldText] = useState('')\n\n    const getTextByLocation = (location) => {\n\n        let rtnValue = {}\n\n        for(let element of texts){\n            if(element.location === location){\n                rtnValue.text = element.text\n                rtnValue.id = element._id\n            }\n        }\n\n        return rtnValue\n    }\n\n    const onChangeHandler = (event, child) => {\n\n        setFieldText(child.key)\n\n        let textInfo = getTextByLocation(child.key)\n\n        props.setEditTextId(textInfo.id)\n        props.setEditText(textInfo.text)\n    }\n\n\n    return (\n        <React.Fragment>\n                    <TextField select\n                        value={fieldText}\n                        onChange={onChangeHandler}\n                        helperText=\"Select a text.\"\n                        >\n                        {\n                            texts.map((text) => (\n                                <MenuItem id={text._id}  key={text.location} value={text.location}>\n                                    {text.location}\n                                </MenuItem>\n                            ))\n                        }\n\n                    </TextField>\n        </React.Fragment>\n    );\n}\n\nexport default ChooseText;","import React, { useState, useContext } from 'react';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport ChooseText from './ChooseText';\nimport { ProjectsContext } from './ProjectsContext'\nimport {LoginContext} from './LoginContext'\nimport consts from '../consts'\n\nfunction AdminEditTexts(props) {\n\n    const [text, setText] = useState('')\n    const [editTextId, setEditTextId] = useState('')\n\n    const {token} = useContext(LoginContext)\n    const { texts, setTexts } = useContext(ProjectsContext)\n\n    const onClickSave = () => {\n\n        fetch(`${consts.uriBase}${consts.textsRoute}/${editTextId}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({text})\n        })\n        .then(httpResponse => {\n            if(!httpResponse.ok){\n                throw new Error(\"Failed to patch\")\n            }\n\n            return httpResponse.json()\n        })\n        .then(result => {\n\n            console.log(result)\n\n            if(result.message === undefined){\n                // if a row was modified\n                // update our text in the\n                // texts array\n                if(result.nModified === 1){\n\n                    let newList = [...texts]\n\n                    // look for the changed project\n                    for(let element of newList){\n                        if(element._id === editTextId){\n\n\n                            // change the text of the object to\n                            // the current textin the text field\n                            element.text = text\n                        }\n                    }\n    \n                    setTexts(newList)\n\n                    alert(\"Changes Saved\")\n\n                } else {\n                    alert(\"Nothing changed\")\n                }\n            } else {\n                alert(result.message)\n            }\n\n        })\n\n    }\n\n    return (\n        <div style={{ minWidth: 300 }}>\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <h3>Edit Texts</h3>\n\n                <ChooseText setEditText={setText} setEditTextId={setEditTextId} />\n                <br />\n\n                <TextField required\n                    multiline\n                    label=\"Text\"\n                    value={text}\n                    fullWidth\n                    onChange={(event) => setText(event.target.value)}\n                />\n                <br />\n                <Button variant='contained' color='primary' onClick={onClickSave}>\n                    Save\n                        </Button>\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminEditTexts;","import React, { useState, useContext } from 'react'\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\nimport Paper from '@material-ui/core/Paper';\nimport { LoginContext } from './LoginContext';\n\nfunction AdminMessages(props) {\n\n    const [showMessages, setShowMessages] = useState(false)\n    const [messages, setMessages] = useState([])\n\n    const { token } = useContext(LoginContext)\n\n\n    const onClickShowMessages = () => {\n\n        fetch(`${consts.uriBase}${consts.messagesRoute}`, {\n            method: \"GET\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n            }\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not get messages\")\n                }\n\n                return httpResult.json()\n            })\n            .then(result => {\n\n                // if no error message\n                if (result.message === undefined) {\n                    console.log(result)\n                    setMessages(result)\n                    setShowMessages(true)\n                } else {\n                    // alert the error message\n                    alert(result.message)\n                }\n\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n    }\n\n    const onClickDelete = async (event) => {\n\n        let id = event.target.id\n\n        fetch(`${consts.uriBase}${consts.messagesRoute}/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            }\n\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not delete message.\")\n                }\n\n                return httpResult.json()\n            })\n            .then(result => {\n\n                if (result.deletedCount === 1) {\n\n                    // update our messages array\n                    let newList = [...messages]\n\n                    let index\n\n                    // find the indexOf the deleted message\n                    for (let message of newList) {\n\n                        if (message._id === id) {\n                            index = newList.indexOf(message)\n                        }\n                    }\n\n                    //remove it from the projects array\n                    newList.splice(index, 1)\n\n                    //set the state\n                    setMessages(newList)\n                }\n            })\n            .catch(error => {\n                alert(error.message)\n            })\n    }\n\n    return (\n        <div>\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <div>\n                    <h2>Messages</h2>\n                </div>\n                <div>\n                    {\n                        showMessages ? (\n                            <div>\n                                <ul>\n                                    {\n                                        messages.map((value) => {\n                                            return (\n                                                <li key={value._id}>\n                                                    {`${new Date(value.date).toLocaleDateString()}||${value.email}||${value.name}||${value.message}||${value.app}`}\n                                                    <button id={value._id} onClick={onClickDelete}>DELETE</button>\n                                                </li>\n                                            )\n                                        })\n                                    }\n                                </ul>\n                            </div>\n                        ) : (\n                                null\n                            )\n                    }\n\n                </div>\n                <div>\n                    <Button onClick={onClickShowMessages} variant='contained' color='primary'>Show Messages</Button>\n                </div>\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminMessages;","import React from 'react';\nimport AdminCreateProject from './AdminCreateProject';\nimport Grid from '@material-ui/core/Grid'\nimport UploadFile from './UploadFile';\nimport AdminEditProject from './AdminEditProject';\nimport AdminEditTexts from './AdminEditTexts'\nimport AdminMessages from './AdminMessages'\n\n\nfunction AdminPage(props) {\n\n\n\n\n    return (\n        <div>\n            <Grid container direction=\"column\"\n             spacing={3} \n             justify='space-evenly'\n             alignItems='center' >\n\n                <Grid item xs={6}>\n                    <UploadFile />\n                </Grid>\n\n                <Grid item>\n\n                    <Grid container spacing={3} justify='space-evenly'>\n\n                        <Grid item>\n                            <AdminCreateProject />\n                        </Grid>\n\n                        <Grid item>\n                            <AdminEditProject />\n                        </Grid>\n\n                        <Grid item>\n                            <AdminEditTexts />\n                        </Grid>\n\n                    </Grid>\n\n                </Grid>\n\n                <Grid item>\n                    <AdminMessages />\n                </Grid>\n\n            </Grid>\n\n        </div>\n    );\n}\n\nexport default AdminPage;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {LoginConsumer} from './LoginContext'\n\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <LoginConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/login'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </LoginConsumer>\n    )\n\n}","import { useEffect} from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nfunction ScrollToTop({ history }) {\n\n\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n\n    });\n    return () => {\n      unlisten();\n\n    }\n  }, [history]);\n\n  return (null);\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport MainPage from './MainPage'\nimport Portfolio from './Portfolio'\nimport AboutMe from './AboutMe';\nimport ContactMe from './ContactMe';\nimport { LoginProvider } from './LoginContext';\nimport { ProjectsProvider } from './ProjectsContext'\nimport Footer from './Footer';\nimport Header from './Header';\nimport Login from './Login'\nimport AdminPage from './AdminPage'\nimport ProtectedRoute from './ProtectedRoute';\nimport ScrollToTop from './ScrollToTop';\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <ScrollToTop />\n                <LoginProvider>\n                    <ProjectsProvider>\n                        <Header></Header>\n                        <Switch>\n                            <Route path='/portfolio' component={Portfolio} />\n                            <Route path='/about' component={AboutMe} />\n                            <Route path='/contact' component={ContactMe} />\n                            <Route path='/login' component={Login} />\n                            <ProtectedRoute path=\"/admin\" component={AdminPage} />\n                            <Route path='/' component={MainPage} />\n                        </Switch>\n                        <Footer></Footer>\n                    </ProjectsProvider>\n                </LoginProvider>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport MainRouter from './components/MainRouter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}