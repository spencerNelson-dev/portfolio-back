{"version":3,"sources":["consts.js","components/HorizontalCard.js","components/LoginContext.js","components/ProjectCard.js","components/projects.js","components/ProjectsContext.js","components/MainPage.js","components/Portfolio.js","components/AboutMe.js","components/ContactMe.js","components/Footer.js","components/Header.js","components/Login.js","components/AdminCreateProject.js","components/UploadFile.js","components/AdminEditProject.js","components/AdminPage.js","components/ProtectedRoute.js","components/ScrollToTop.js","components/MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["constants","uriBase","authRoute","projectsRoute","usersRoute","HorizontalCard","props","Grid","container","spacing","justify","item","xs","Card","raised","CardContent","CardMedia","component","alt","height","image","consts","title","Typography","gutterBottom","variant","color","CardActions","Button","size","href","LoginContext","React","createContext","LoginProvider","useState","loggedIn","setLoggedIn","token","setToken","useEffect","localToken","window","localStorage","getItem","payload","jwt","decode","Date","now","valueOf","exp","alert","removeItem","Provider","value","writeToken","setItem","children","LoginConsumer","Consumer","useStyles","makeStyles","root","maxWidth","minWidth","margin","display","flexDirection","justifyContent","media","ProjectCard","classes","useContext","card","_id","id","Fragment","className","imgSrc","text","liveLink","gitHubLinks","map","index","key","onClick","fetch","method","headers","then","httpResponse","ok","Error","json","result","deletedCount","newList","projects","project","indexOf","splice","setProjects","catch","error","console","log","DUMMY_DATA","getProjects","ProjectsContext","ProjectsProvider","images","setImages","length","imgNames","MainPage","alignItems","rtnArr","push","getThreeProjects","style","textAlign","RLink","to","Portfolio","AboutMe","Paper","elevation","ContactMe","width","Footer","BottomNavigation","showLabels","BottomNavigationAction","label","icon","target","rel","theme","flexGrow","menuButton","marginRight","list","fullList","Header","openDrawer","setOpenDrawer","onClickHandler","AppBar","position","Toolbar","IconButton","edge","aria-label","Drawer","open","onClose","role","List","ListItem","button","toLowerCase","ListItemIcon","listItem","rtnValue","getIcon","ListItemText","primary","paper","marginTop","avatar","backgroundColor","palette","secondary","main","form","submit","SignIn","email","setEmail","password","setPassword","Container","CssBaseline","Avatar","TextField","required","fullWidth","name","autoComplete","autoFocus","onChange","event","type","body","JSON","stringify","history","formControl","selectEmpty","AdminCreateProject","setTitle","setText","setLiveLink","setGitHubLinks","setImgSrc","padding","multiline","helperText","select","child","img","MenuItem","preventDefault","newProject","httpResonse","UploadFile","file","setFile","onSubmit","data","FormData","append","response","Input","files","inputProps","float","AdminEditProject","setId","currentProject","setCurrentProject","clearInputs","element","updatedProject","Array","isArray","replace","split","changes","property","httpResult","nModified","AdminPage","direction","ProtectedRoute","Component","rest","render","withRouter","unlisten","listen","scrollTo","MainRouter","path","Login","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.38b0fbfb.chunk.js","sourcesContent":["\nconst constants = {\n\n    uriBase: process.env.NODE_ENV !== 'production' ? (\n            \"http://localhost:3001\"\n            ) : (\n            \"\" // this is blank because heroku adds the base for us\n            ),\n\n    authRoute: \"/api/v1/auth\",\n    projectsRoute: \"/api/v1/projects\",\n    usersRoute: \"/api/v1/users\"\n}\n\n\n\nexport default constants\n","import React from 'react';\n//import { Link as RLink } from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport consts from '../consts'\n\nconst HorizontalCard = (props) => {\n    return (\n        <div>\n            <div>\n                <Grid container spacing={5} justify='center'>\n\n                    <Grid item xs={10}>\n                        <Card raised={true}>\n                            <CardContent>\n\n                                <CardMedia\n                                    component=\"img\"\n                                    alt=\"Hot air balloons\"\n                                    height=\"140\"\n                                    image={`${consts.uriBase}/public/images/about.jpg`}\n                                    title=\"Who is Spencer Nelson\"\n                                />\n\n                                {/* Card Title */}\n                                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                    Spencer Nelson\n                                </Typography>\n\n                                {/* Card description text */}\n                                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                    I am a software developer in the Salt Lake area.\n                                    My focus is currently on React.js, express.js, MongoDB, and Node.js.\n                                    I also have experience working with python and prostgres. Please look\n                                    at my projects and see the cool things I've created. Thanks!\n                                </Typography>\n\n                            </CardContent>\n                            <CardActions>\n                                <Button size=\"small\" color=\"primary\" href='/about'>\n                                    More About Me\n                                </Button>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n                </Grid>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default HorizontalCard;","import React, { useState, useEffect } from 'react'\nimport jwt from 'jsonwebtoken'\n\n\nconst LoginContext = React.createContext()\n\nconst LoginProvider = (props) => {\n\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [token, setToken] = useState('')\n\n    // want to write to local storage.\n    // so when the user refreshes we aren't logged out\n    const writeToken = (token) => {\n\n        window.localStorage.setItem(\"token\", token)\n\n        setToken(token)\n        setLoggedIn(true)\n    }\n\n    useEffect(() => {\n\n        let localToken = window.localStorage.getItem('token')\n\n        // if a token is in local storage\n        if (localToken) {\n\n            // decode the token\n            let payload = jwt.decode(localToken)\n\n            // Check if the token is expired\n            if (Date.now().valueOf() / 1000 >= payload.exp) {\n\n                // alert\n                alert(\"You have been logged out due to inactivity.\")\n                setLoggedIn(false)\n                window.localStorage.removeItem('token')\n            } else {\n                // the token is not expired\n                setToken(localToken)\n                setLoggedIn(true)\n            }\n\n        }// end of if\n    }, [])\n\n    return (\n        <LoginContext.Provider value={{ loggedIn, setLoggedIn, token, writeToken }}>\n            {props.children}\n        </LoginContext.Provider>\n    )\n}\n\nconst LoginConsumer = LoginContext.Consumer\nexport { LoginProvider, LoginConsumer, LoginContext }\n\n","import React, { useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n//import Paper from '@material-ui/core/Paper'\nimport consts from '../consts'\nimport {LoginContext} from './LoginContext'\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n        minWidth: 345,\n        margin: 16,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between'\n    },\n    media: {\n        height: 140,\n    },\n});\n\nfunction ProjectCard(props) {\n    const classes = useStyles();\n\n    const {loggedIn, token} = useContext(LoginContext)\n    const [id] = useState(props.card._id)\n\n    const onClickDelete = () => {\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}/${props.card._id}`,{\n            method: \"DELETE\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\",\n            }\n        })\n        .then(httpResponse => {\n            if(!httpResponse.ok){\n\n                throw new Error(\"Could not delete object\")\n            }\n\n            return httpResponse.json()\n        })\n        .then(result => {\n\n            // if the result comes back with a deleted count of 1\n            // update the state of the projects array\n            if(result.deletedCount === 1){\n\n                // update our projects array\n                let newList = [...props.projects]\n\n                let index\n\n                // find the indexOf the deleted project\n                for (let project of newList){\n\n                    if(project._id === id){\n                        index = newList.indexOf(project)\n                    }\n                }\n\n                //remove it from the projects array\n                newList.splice(index, 1)\n\n                //set the state\n                props.setProjects(newList)\n            }\n            else {\n                alert(\"Not Authorized\")\n            }\n        })\n        .catch(error => {\n            console.log(error)\n        })\n\n    }\n\n    return (\n        <React.Fragment>\n            {/* classes.root */}\n            <Card className={classes.root} raised={true}> \n\n                {/* Card picture */}\n                <CardMedia\n                    className={classes.media}\n                    image={`${consts.uriBase}/public/images/${props.card.imgSrc}`}\n                    title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n\n                    {/* Card Title */}\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {props.card.title}\n                    </Typography>\n\n                    {/* Card description text */}\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {props.card.text}\n                    </Typography>\n\n                </CardContent>\n\n\n                <CardActions>\n\n                    {/* Live Site button */}\n                    {\n                        props.card.liveLink !== \"\" ? (\n\n                            <Button href={props.card.liveLink} size=\"small\" color=\"primary\">\n                                Live Site\n                            </Button>\n\n                        ) : (\n                                null\n                            )\n                    }\n\n                    {/* GitHub button */}\n                    {\n                        props.card.gitHubLinks !== [] ? (\n                            props.card.gitHubLinks.map((value, index)=> {\n                                return(\n                                    <Button key={value} href={value} color=\"primary\">{`GitHub ${index + 1}`}</Button>\n                                )\n                            })\n                        ):(\n                            null\n                        )\n                    }\n                    {/* Delete Button (only if logged in) */}\n                    {\n                        loggedIn ? (\n                            <Button onClick={onClickDelete} color='secondary'>Delete</Button>\n                        ):(\n                            null\n                        )\n                    }\n\n                </CardActions>\n            </Card>\n\n\n        </React.Fragment>\n    );\n}\n\nexport default ProjectCard;","import consts from '../consts'\n\nlet DUMMY_DATA = [\n    {\n        \"_id\": 0,\n        \"title\": \"Task Manager\",\n        \"text\": \"I've created a simple task app and added Google signin using OAuth2. The front end is created in React.js and the backend is run on Node.js with a MongoDB database. The sight utilized authentication and authorization.\",\n        \"liveLink\": \"https://sn-todo.herokuapp.com\",\n        \"gitHubLinks\": [\"https://github.com/spencerNelson-dev/to-do-ui\",\n                        \"https://github.com/spencerNelson-dev/to-do-api\"],\n        \"imgSrc\": \"task-tracker.png\"\n    }\n]\n\nconst getProjects = () => {\n\n     return fetch(`${consts.uriBase}${consts.projectsRoute}`,{\n        method:\"GET\"\n    })\n    .then(httpResponse => {\n        if(!httpResponse.ok){\n            throw new Error(\"Could not get all projects\")\n        }\n\n        return httpResponse.json()\n    })\n    .then(result => {\n\n        // if there are no projects found\n        // use the hard coded data\n        if (result === []){\n            return DUMMY_DATA\n        }\n\n        return result\n    })\n    .catch(error => {\n        console.log(error)\n        // if there is an error\n        // use the dummy data\n        return DUMMY_DATA\n    })\n}\n\n\n\nexport default getProjects","import React, { useState, useEffect } from 'react'\nimport consts from '../consts'\nimport getProjects from './projects'\n\n\nconst ProjectsContext = React.createContext()\n\nconst ProjectsProvider = (props) => {\n\n    const [projects, setProjects] = useState([])\n    const [images, setImages] = useState([])\n\n    const getImgNames = () => {\n\n        return fetch(`${consts.uriBase}${consts.projectsRoute}/img`,{\n            method: \"Get\"\n        })\n        .then(httpResponse => {\n            if(!httpResponse.ok){\n                throw new Error(\"Could not get image file names\")\n            }\n\n            return httpResponse.json()\n        })\n        .then(imgNames => {\n\n            setImages(imgNames)\n\n        })\n        .catch(error => {\n            console.log(error)\n            setImages([])\n        })\n    }\n\n\n    useEffect( () => {\n\n        //only go to the server the\n        //first time the app loads\n        if( projects.length === 0){\n\n            getProjects()\n            .then(result => {\n                setProjects(result)\n            })\n        }\n        if(images.length === 0){\n            getImgNames()\n        }\n    },[images.length, projects.length])\n\n    return (\n        <ProjectsContext.Provider value={{ projects, setProjects, images, setImages }}>\n            {props.children}\n        </ProjectsContext.Provider>\n    )\n}\n\nconst ProjectsConsumer = ProjectsContext.Consumer\nexport { ProjectsProvider, ProjectsConsumer, ProjectsContext}\n\n","import React, { useContext } from 'react'\nimport HorizontalCard from './HorizontalCard'\nimport ProjectCard from './ProjectCard'\nimport { Link as RLink } from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport { ProjectsContext } from './ProjectsContext'\n\n//function to get only three projects\nfunction getThreeProjects(projects, setProjects) {\n\n    let rtnArr = []\n\n    for (let index = 0; index < projects.length && index < 3; index++) {\n        rtnArr.push(projects[index])\n    }\n\n    return rtnArr\n}\n\nexport default function MainPage(props) {\n\n    const { projects, setProjects } = useContext(ProjectsContext)\n\n    return (\n        <div>\n            {/* <!-- Section with horizontal card --> */}\n            <HorizontalCard></HorizontalCard>\n\n            {/* <!-- Section with project pictures and info --> */}\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={3} alignItems='stretch' >\n                        {\n                            getThreeProjects(projects).map(project => {\n                                return (\n                                    <Grid key={project._id} item\n                                        component={() => <ProjectCard key={project._id}\n                                            card={project}\n                                            projects={projects}\n                                            setProjects={setProjects} />} >\n                                    </Grid>\n                                )\n                            })\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n\n            <br /><br />\n            {/* <!-- Section with our Portfolio Button --> */}\n            <div style={{ textAlign: 'center' }}>\n                <Button variant=\"contained\"\n                    color=\"secondary\"\n                    component={RLink}\n                    to='/portfolio'>\n                    View All Projects\n                </Button>\n            </div>\n\n        </div>\n    )\n}","import React, {useContext } from 'react';\nimport ProjectCard from './ProjectCard'\nimport Grid from '@material-ui/core/Grid'\nimport {ProjectsContext} from './ProjectsContext'\n\nfunction Portfolio(props) {\n\n    const {projects, setProjects} = useContext(ProjectsContext)\n\n    return (\n        <div>\n            <br /><br />\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Grid container justify=\"center\" spacing={3}>\n                        {\n                            projects.map(project => {\n                                return (\n                                    <Grid key={project._id} item\n                                        component={() => <ProjectCard key={project._id}\n                                            card={project}\n                                            setProjects={setProjects}\n                                            projects={projects} />} >\n                                    </Grid>\n                                )\n                            })\n                        }\n                    </Grid>\n                </Grid>\n            </Grid>\n            <br /><br />\n        </div >\n    );\n}\n\nexport default Portfolio;","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport consts from '../consts'\n\nfunction AboutMe(props) {\n  return (\n    <div>\n\n      <Grid container>\n        <Grid item xs={12} style={{ margin: 32 }}>\n\n          <Paper elevation={6}>\n            <Card >\n              <CardMedia\n                component=\"img\"\n                alt=\"Hot air balloons\"\n                height=\"140\"\n                image={`${consts.uriBase}/public/images/about.jpg`}\n                title=\"Who is Spencer Nelson\"\n              />\n              <CardContent>\n\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Introduction\n                </Typography>\n\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Coming soon\n                  <a href=\"https://wonderful-bhabha-1bf181.netlify.com\">events</a>\n               </Typography>\n\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                  Mission\n                </Typography>\n\n              </CardContent>\n            </Card>\n          </Paper>\n\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n\nexport default AboutMe;","import React from 'react';\n\nfunction ContactMe(props) {\n    return (\n        <div>\n           Email: spencernelson144@gmail.com\n        </div>\n    );\n}\n\nexport default ContactMe;","import React from 'react';\nimport { Link as RLink } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\nimport CopyrightIcon from '@material-ui/icons/Copyright';\nimport PaletteIcon from '@material-ui/icons/Palette';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 500,\n    },\n});\n\nfunction Footer(props) {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <BottomNavigation\n                showLabels\n                className={classes.root}\n            >\n                <BottomNavigationAction component={RLink} to='/login' label=\"Spencer Nelson\" icon={<CopyrightIcon />} />\n                \n                <BottomNavigationAction href=\"https://templateflip.com/\" target=\"_blank\" rel=\"noopener noreferrer\"  label=\"templateflip.com\" icon={<PaletteIcon />} >\n                </BottomNavigationAction>\n            </BottomNavigation>\n\n        </div>\n    );\n}\n\nexport default Footer;","import React, { useState, useContext } from 'react';\nimport { Link as RLink } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport PersonIcon from '@material-ui/icons/Person';\nimport MailIcon from '@material-ui/icons/Mail';\nimport TableChartIcon from '@material-ui/icons/TableChart';\n\nimport {LoginContext} from './LoginContext'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    list: {\n        width: 250,\n      },\n      fullList: {\n        width: 'auto',\n      },\n}));\n\nconst getIcon = (listItem) => {\n\n    let rtnValue\n//'Home', 'Portfolio', 'About', 'Contact'\n    switch (listItem) {\n        case 'Home':\n            rtnValue = <HomeIcon/>\n            break;\n        case 'Portfolio':\n            rtnValue = <TableChartIcon/>\n            break;\n        case 'About':\n            rtnValue = <PersonIcon/>\n            break;\n        case 'Contact':\n            rtnValue = <MailIcon/>\n            break;\n        default:\n            break;\n    }\n\n\n    return rtnValue\n}\n\nfunction Header(props) {\n    const classes = useStyles()\n\n    const [openDrawer, setOpenDrawer] = useState(false)\n\n    const {loggedIn, setLoggedIn} = useContext(LoginContext)\n\n    const onClickHandler = () => {\n\n        setOpenDrawer(!openDrawer)\n    }\n\n    const onClickLogOut = () => {\n        //remove token from local storage\n        window.localStorage.removeItem('token')\n\n        // set logged in to false\n        setLoggedIn(false)\n    }\n\n    return (\n\n        <div>\n            <div className={classes.root}>\n                <AppBar position=\"fixed\">\n                    <Toolbar >\n                        <IconButton edge=\"start\"\n                            className={classes.menuButton}\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            onClick={onClickHandler}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Spencer Nelson {loggedIn ? <RLink to=\"/admin\">Admin</RLink> : null}\n                            {loggedIn ? <Button onClick={onClickLogOut}>Log Out</Button> : null}\n                        </Typography>\n                        <Button color=\"inherit\" component={RLink} to='/'>Home</Button>\n                        <Button color=\"inherit\" component={RLink} to='/portfolio'>Portfolio</Button>\n                        <Button color=\"inherit\" component={RLink} to='/about'>About</Button>\n                        <Button color=\"inherit\" component={RLink} to='/contact'>Contact</Button>\n                    </Toolbar>\n                </AppBar>\n                <Toolbar />\n            </div>\n\n            <div>\n                {/* Drawer */}\n                <Drawer open={openDrawer} onClose={onClickHandler}>\n                    <div\n                    className={classes.list}\n                    role=\"presentation\">\n                    <List>\n                        {['Home', 'Portfolio', 'About', 'Contact'].map((text, index) => (\n                            <ListItem button onClick={onClickHandler} component={RLink} to={`/${text.toLowerCase()}`} key={text}>\n                                <ListItemIcon>{getIcon(text)}</ListItemIcon>\n                                <ListItemText primary={text} />\n                            </ListItem>\n                        ))}\n                    </List>\n                    </div>\n                </Drawer>\n            </div>\n\n        </div>\n\n    );\n}\n\nexport default Header;","import React, { useState, useContext } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport consts from '../consts'\nimport { LoginContext } from './LoginContext'\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn(props) {\n  const classes = useStyles();\n\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  const { writeToken } = useContext(LoginContext)\n\n  const onClick = () => {\n\n    // send the email and password\n    // to the login api and expect\n    // a token in return if successful\n    // or an empty string if not\n    fetch(`${consts.uriBase}${consts.authRoute}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ email, password })\n    })\n      .then(httpResponse => {\n        if (!httpResponse.ok) {\n          throw new Error(\"Login Failed\")\n        }\n\n        return httpResponse.json()\n      })\n      .then(token => {\n\n        //if we get a token back\n        if (token !== \"\") {\n\n          // store the token in local storage\n          writeToken(token)\n        } else {\n\n          //let the user know that the\n          //password/email combo was not valid\n          alert(\"Incorrect email and password!\")\n        }\n\n        //clear state\n        setEmail('')\n        setPassword('')\n\n        //move the user to the admin page\n        props.history.push('/admin')\n\n      })\n  }\n\n  return (\n    <div>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={`${classes.paper}`}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n        </Typography>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value={password}\n            onChange={(event) => setPassword(event.target.value)}\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={onClick}\n          >\n            Sign In\n          </Button>\n        </div>\n      </Container>\n    </div>\n  );\n}","import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\nimport { ProjectsContext } from './ProjectsContext';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { LoginContext } from './LoginContext';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\nfunction AdminCreateProject(props) {\n    const classes = useStyles()\n\n    const [title, setTitle] = useState('')\n    const [text, setText] = useState('')\n    const [liveLink, setLiveLink] = useState('')\n    const [gitHubLinks, setGitHubLinks] = useState('')\n    const [imgSrc, setImgSrc] = useState('')\n\n    const { images, projects, setProjects } = useContext(ProjectsContext)\n    const {token} = useContext(LoginContext)\n\n    const clearInputs = () => {\n        setTitle('')\n        setText('')\n        setLiveLink('')\n        setGitHubLinks('')\n        setImgSrc('')\n    }\n\n    const onCreate = (event) => {\n\n        event.preventDefault()\n\n        let newProject = {\n            title,\n            text,\n            liveLink,\n            gitHubLinks,\n            imgSrc\n        }\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify(newProject)\n        })\n            .then(httpResonse => {\n                if (!httpResonse.ok) {\n                    throw new Error(\"Could not get projects\")\n                }\n\n                return httpResonse.json()\n            })\n            .then(result => {\n\n                // update projects array\n                let newList = [...projects]\n\n                newList.push(result)\n\n                setProjects(newList)\n\n                //Clear the inputs\n                clearInputs()\n            })\n            .catch(error => {\n                alert(error)\n            })\n    }\n\n    return (\n        <div >\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <h3>Create Project</h3>\n                <div className={classes.root}>\n                    <TextField required\n                        label=\"Title\"\n                        value={title}\n                        onChange={(event) => setTitle(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        multiline\n                        label=\"Text\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"Live Link\"\n                        value={liveLink}\n                        onChange={(event) => setLiveLink(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"GitHub Links\"\n                        multiline value={gitHubLinks}\n                        onChange={(event) => setGitHubLinks(event.target.value)}\n                        helperText=\"multiple links seperated with commas\"\n                    />\n                    <br /><br />\n                    <TextField select\n                        value={imgSrc}\n                        onChange={(event, child) => { setImgSrc(child.key)}}\n                        helperText=\"Please select an image\"\n                        >\n                        {\n                            images.map((img) => (\n                                <MenuItem key={img} value={img}>\n                                    {img}\n                                </MenuItem>\n                            ))\n                        }\n\n                    </TextField>\n\n                </div>\n                <br />\n                <Button variant='contained'\n                    color='primary'\n                    onClick={onCreate}>Create!</Button>\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminCreateProject;","import React, { useState, useContext } from 'react';\nimport Input from '@material-ui/core/Input'\nimport Button from '@material-ui/core/Button'\nimport { Paper } from '@material-ui/core';\nimport consts from '../consts'\nimport { LoginContext } from './LoginContext';\n\nfunction UploadFile(props) {\n\n    const [file, setFile] = useState('')\n\n    const {token} = useContext(LoginContext)\n\n\n    const onUploadHandler = (event) => {\n\n        event.preventDefault()\n\n        const data = new FormData()\n\n        data.append('file', file)\n        data.append('filename', file.name)\n\n        fetch(`${consts.uriBase}${consts.projectsRoute}/img/upload`, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: data\n        })\n            .then(httpResponse => {\n                if (!httpResponse.ok) {\n                    throw new Error(\"Failed to upload file\")\n                }\n\n                return httpResponse.json()\n            })\n            .then(response => {\n                alert(response)\n                setFile('')\n            })\n            .catch(error => {\n                alert(error)\n            })\n    }\n\n    return (\n        <div>\n            <Paper elevation={3}>\n                <div style={{margin: 30}}>\n                    <h3>Upload Image</h3>\n\n                    <form onSubmit={onUploadHandler}>\n                        <Input type='file'\n                            onChange={(event) => setFile(event.target.files[0])}\n                            inputProps={{ 'aria-label': 'description' }}\n                        />\n                        <Button type='submit'>Upload</Button>\n                    </form>\n                </div>\n            </Paper>\n        </div>\n    );\n}\n\nexport default UploadFile;","import React, { useState, useContext } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button'\nimport consts from '../consts'\nimport { ProjectsContext } from './ProjectsContext';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { LoginContext } from './LoginContext';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    button: {\n        float: \"right\"\n    }\n}));\n\nfunction AdminEditProject(props) {\n    const classes = useStyles()\n\n    const [id, setId] = useState('')\n    const [title, setTitle] = useState('')\n    const [text, setText] = useState('')\n    const [liveLink, setLiveLink] = useState('')\n    const [gitHubLinks, setGitHubLinks] = useState('')\n    const [imgSrc, setImgSrc] = useState('')\n\n    const [currentProject, setCurrentProject] = useState({})\n\n    const { images, projects, setProjects } = useContext(ProjectsContext)\n    const {token} = useContext(LoginContext)\n\n    const clearInputs = () => {\n        setId('')\n        setTitle('')\n        setText('')\n        setLiveLink('')\n        setGitHubLinks('')\n        setImgSrc('')\n        setCurrentProject({})\n    }\n\n    const onProjectSelect = (event, child) => {\n\n        // get the project from the\n        // array of projects\n        // the component does not update state until\n        // the function is done, so we cannot use\n        // element._id === id. id would be ''\n        // even after we selected an item\n        for (let element of projects) {\n\n            if (element._id === child.key) {\n\n                // if found, set state\n                // for our inputs\n                setId(child.key)\n                setTitle(element.title)\n                setText(element.text)\n                setLiveLink(element.liveLink)\n                setGitHubLinks(element.gitHubLinks)\n                setImgSrc(element.imgSrc)\n\n                // set the currentProject state\n                // this will be used when we click\n                // the edit button\n                setCurrentProject(element)\n            }\n        }\n    }\n\n    const onEdit = () => {\n\n        //the id must be present to edit\n        if (id === '') {\n            alert(\"No project selected to edit.\")\n            clearInputs()\n        } else {\n\n            // build our updated projects\n            // from our input fields\n            let updatedProject = {\n                _id: id,\n                title,\n                text,\n                liveLink,\n                // if gitHubLinks is an array, \n                // pass in the value, else,\n                // remove spaces and newlines and\n                // split\n                gitHubLinks: Array.isArray(gitHubLinks) ? gitHubLinks : gitHubLinks.replace(/[\\s\\n]/g,'').split(','),\n                imgSrc\n            }\n\n            // build an object that contains\n            // only the properties that have\n            // changed\n            let changes = {}\n\n            for (let property in currentProject){\n\n                // we want to skip the __v property\n                if(property === '__v') continue;\n\n                // if the properties are different\n                if(updatedProject[property] !== currentProject[property]){\n\n                    // put the change into our changes obj\n                    changes[property] = updatedProject[property]\n                }\n            }\n\n            // send the changes to our PATCH api\n            fetch(`${consts.uriBase}${consts.projectsRoute}/${id}`, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                body: JSON.stringify(changes)\n            })\n            .then(httpResult => {\n                if(!httpResult.ok){\n                    throw new Error(\"Failed to patch\")\n                }\n\n                return httpResult.json()\n            })\n            .then(result => {\n\n                // if a row was modified\n                // update our project in the\n                // project array\n                if(result.nModified === 1){\n\n                    let newList = [...projects]\n\n                    // look for the changed project\n                    for(let element of newList){\n                        if(element._id === id){\n\n                            // change the properties that are\n                            // in the changes object\n                            for(let property in changes){\n                                element[property] = changes[property]\n                            }\n                        }\n                    }\n    \n                    setProjects(newList)\n    \n                    //Clear the inputs\n                    clearInputs()\n\n                } else {\n                    alert(\"Nothing changed\")\n                }\n            })\n            .catch(error => {\n                console.log(error)\n            })\n            \n\n        }// end of if\n    }\n\n    return (\n        <div >\n            <Paper elevation={3} style={{ padding: 16 }}>\n                <h3>Edit Project</h3>\n                <div className={classes.root}>\n                    <TextField select\n                        value={id}\n                        onChange={onProjectSelect}\n                        helperText=\"Please select a project\">\n                        {\n                            projects.map((project) => (\n                                <MenuItem key={project._id} value={project._id}>\n                                    {project.title}\n                                </MenuItem>\n                            ))\n                        }\n                    </TextField>\n                    <br />\n                    <TextField required\n                        label=\"Title\"\n                        value={title}\n                        onChange={(event) => setTitle(event.target.value)}\n                    />\n                    <br />\n                    <TextField required\n                        multiline\n                        label=\"Text\"\n                        value={text}\n                        onChange={(event) => setText(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"Live Link\"\n                        value={liveLink}\n                        onChange={(event) => setLiveLink(event.target.value)}\n                    />\n                    <br />\n                    <TextField label=\"GitHub Links\"\n                        multiline value={gitHubLinks}\n                        onChange={(event) => setGitHubLinks(event.target.value)}\n                        helperText=\"multiple links seperated with commas\"\n                    />\n                    <br /><br />\n                    <TextField select\n                        value={imgSrc}\n                        onChange={(event, child) => { setImgSrc(child.key) }}\n                        helperText=\"Please select an image\"\n                    >\n                        {\n                            images.map((img) => (\n                                <MenuItem key={img} value={img}>\n                                    {img}\n                                </MenuItem>\n                            ))\n                        }\n\n                    </TextField>\n\n                </div>\n                <br />\n                <Button variant='contained'\n                    color='primary'\n                    onClick={onEdit}\n                >\n                    Edit!\n                    </Button>\n\n                <Button className={classes.button} variant='contained'\n                    color='secondary'\n                    onClick={clearInputs}\n                >\n                    Clear\n                    </Button>\n\n\n            </Paper>\n        </div>\n    );\n}\n\nexport default AdminEditProject;","import React from 'react';\nimport AdminCreateProject from './AdminCreateProject';\nimport Grid from '@material-ui/core/Grid'\nimport UploadFile from './UploadFile';\nimport AdminEditProject from './AdminEditProject';\n\n\nfunction AdminPage(props) {\n\n\n\n\n    return (\n        <div>\n            <Grid container direction=\"column\"\n             spacing={3} \n             justify='space-evenly'\n             alignItems='center' >\n\n                <Grid item xs={6}>\n                    <UploadFile />\n                </Grid>\n\n                <Grid item>\n\n                    <Grid container spacing={3} justify='space-evenly'>\n\n                        <Grid item>\n                            <AdminCreateProject />\n                        </Grid>\n\n                        <Grid item>\n                            <AdminEditProject />\n                        </Grid>\n\n                    </Grid>\n\n                </Grid>\n\n            </Grid>\n\n        </div>\n    );\n}\n\nexport default AdminPage;","import React from 'react'\nimport {Route, Redirect} from 'react-router-dom'\nimport {LoginConsumer} from './LoginContext'\n\n\nexport default function ProtectedRoute ({component: Component, ...rest}) {\n\n    return (\n        <LoginConsumer>\n            {\n                ({loggedIn}) => (\n\n                    <Route\n                        render ={props => \n\n                            loggedIn ? <Component {...props} /> : <Redirect to='/login'/>\n                        }\n                        {...rest}\n                    />\n                )\n            }\n        </LoginConsumer>\n    )\n\n}","import { useEffect} from 'react';\nimport { withRouter } from 'react-router-dom';\n\n\nfunction ScrollToTop({ history }) {\n\n\n  useEffect(() => {\n    const unlisten = history.listen(() => {\n      window.scrollTo(0, 0);\n\n    });\n    return () => {\n      unlisten();\n\n    }\n  }, [history]);\n\n  return (null);\n}\n\nexport default withRouter(ScrollToTop);","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport MainPage from './MainPage'\nimport Portfolio from './Portfolio'\nimport AboutMe from './AboutMe';\nimport ContactMe from './ContactMe';\nimport { LoginProvider } from './LoginContext';\nimport { ProjectsProvider } from './ProjectsContext'\nimport Footer from './Footer';\nimport Header from './Header';\nimport Login from './Login'\nimport AdminPage from './AdminPage'\nimport ProtectedRoute from './ProtectedRoute';\nimport ScrollToTop from './ScrollToTop';\n\nfunction MainRouter(props) {\n    return (\n        <div>\n            <Router>\n                <ScrollToTop />\n                <LoginProvider>\n                    <ProjectsProvider>\n                        <Header></Header>\n                        <Switch>\n                            <Route path='/portfolio' component={Portfolio} />\n                            <Route path='/about' component={AboutMe} />\n                            <Route path='/contact' component={ContactMe} />\n                            <Route path='/login' component={Login} />\n                            <ProtectedRoute path=\"/admin\" component={AdminPage} />\n                            <Route path='/' component={MainPage} />\n                        </Switch>\n                        <Footer></Footer>\n                    </ProjectsProvider>\n                </LoginProvider>\n            </Router>\n\n        </div>\n    );\n}\n\nexport default MainRouter;","import React from 'react';\nimport MainRouter from './components/MainRouter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter></MainRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}